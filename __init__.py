bl_info = {
    "name": "Aperture JSON cameradata import",
    "author": "Christian F. (known as Chryfi)",
    "version": (0, 0, 2),
    "blender": (2, 80, 0),
    "location": "File > Import",
    "description": "Import camera movement from a json file generated by the aperture mod.",
    "warning": "",
    "category": "Import"
}

import bpy
import json
import math

from mathutils import Euler
from bpy.props import (BoolProperty, StringProperty)
from bpy_extras.io_utils import (ImportHelper, path_reference_mode)

class ImportJSON(bpy.types.Operator, ImportHelper):
    # Panel's information
    bl_idname = "test.open_filbrowser"
    bl_label = 'Import Aperture JSON'
    bl_options = {'PRESET'}

    # Panel's properties
    filename_ext = ".json"
    filter_glob = StringProperty(default="*.json", options={'HIDDEN'})
    use_selection = BoolProperty(name="Selection only", description="Import selected json only", default=False)
    path_mode = path_reference_mode
    check_extension = True

    def execute(self, context):
        file = open(self.properties.filepath,)
        data = json.load(file)
        obj_camera = bpy.context.scene.camera
        frameOffset = 1 #first frame of minema rendered video are not usable.
        
        for frame in range(len(data)):
            frameData = data[frame]
            
            try:
                if frame == 0 and "information" in data[frame]:
                    renderInfo = data[frame]["information"]
                    bpy.context.scene.render.fps = renderInfo["fps"]
                    bpy.context.scene.render.resolution_x = renderInfo["resolution"][0]
                    bpy.context.scene.render.resolution_y = renderInfo["resolution"][1]
                else:
                    obj_camera.location = (frameData["position"][0], -frameData["position"][2], frameData["position"][1])
                    obj_camera.delta_rotation_euler  = Euler((math.radians(90-frameData["angle"][3]), 0, math.radians(-frameData["angle"][2]-180)), 'XYZ')
                    obj_camera.rotation_euler = Euler((0, 0, -math.radians(frameData["angle"][1])), 'XYZ')

                    obj_camera.keyframe_insert(data_path="location", frame=frame+frameOffset)
                    obj_camera.keyframe_insert(data_path="delta_rotation_euler", frame=frame+frameOffset)
                    obj_camera.keyframe_insert(data_path="rotation_euler", frame=frame+frameOffset)
            except TypeError:
                self.report({"WARNING"}, "An error occured while reading the file. Check if the file has the correct structure!")
                file.close()
                return {"CANCELLED"}
            except:
                self.report({"WARNING"}, "An error occured while reading the file.")
                file.close()
                return {"CANCELLED"}
        
        file.close()
        return{'FINISHED'}

# Register and stuff
def menu_func_export(self, context):
    self.layout.operator(ImportJSON.bl_idname, text="JSON cameradata (.json)")

classes = (
    ImportJSON, 
)

def register():
    from bpy.utils import register_class
    for cls in classes:
        register_class(cls)

    bpy.types.TOPBAR_MT_file_import.append(menu_func_export)

def unregister():
    from bpy.utils import unregister_class
    for cls in reversed(classes):
        unregister_class(cls)

    bpy.types.TOPBAR_MT_file_import.remove(menu_func_export)
